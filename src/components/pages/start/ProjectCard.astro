---
import type { ProjectCardType } from "@types";
import Button from "@components/ui/Button.astro";
import LinkIcon from "@assets/icons/link.svg";
import GithubIcon from "@assets/icons/github.svg";
import NewTabIcon from "@assets/icons/new-tab.svg";
import { Image } from "astro:assets";
import Tag from "./Tag.astro";
import { getI18n, Locale } from "@i18n/index";

const { currentLocale } = Astro;
const i18n = getI18n({ currentLocale: currentLocale as Locale });

type Props = ProjectCardType;

const { img, title, tags, description, github, preview } = Astro.props;
---

<article class="flex flex-col p-6 justify-between gap-10 bg-secondary/15 rounded-2xl shadow-container shadow-secondary/50">
  <div class="flex flex-col gap-6">
      <Image src={img} alt={title} class="h-60 object-cover transition-transform rounded-2xl project-card-image" />
    <div class="flex flex-col gap-4">
      <h3 class="text-3xl text-primary-foreground font-primary font-medium">{title}</h3>
      <div class="flex flex-wrap gap-x-2 gap-y-1">
        {
          tags.map(({ icon: Icon, content, class: className, iconClass }) => (
            <Tag class={className}>
              {Icon && <Icon slot="icon" class:list={["w-4", iconClass]} />}
              {content}
            </Tag>
          ))
        }
      </div>
    </div>
    {description}
  </div>
  <div class="flex gap-3 justify-end">
    {
      preview && (
        <Button as="a" href={preview} class="py-2">
          <LinkIcon slot="icon" class="w-5 stroke-button-foreground group-hover:stroke-accent" />
          {i18n.PROJECTS.CARD.PREVIEW}
        </Button>
      )
    }
    <Button as="a" href={github} class="py-2">
      <GithubIcon slot="icon" class="w-5 fill-button-foreground group-hover:fill-accent" />
      {i18n.PROJECTS.CARD.SOURCE_CODE}
    </Button>
  </div>
</article>

<script>
  document.addEventListener("astro:page-load", () => {
    // Interactive tilt effect
    const images = document.getElementsByClassName('project-card-image') as HTMLCollectionOf<HTMLImageElement>;

    if (images) {
      Array.from(images).forEach((img) => {
        img.addEventListener('mousemove', (e) => {
          const rect = img.getBoundingClientRect();
          const centerX = rect.left + rect.width / 2;
          const centerY = rect.top + rect.height / 2;

          // Calcular la posiciÃ³n del mouse relativa al centro
          const mouseX = e.clientX - centerX;
          const mouseY = e.clientY - centerY;

          // Convertir a porcentajes y limitar el rango
          const rotateX = (mouseY / rect.height) * -15;
          const rotateY = (mouseX / rect.width) * 15;
          img.style.transform = `perspective(1200px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
        });

        img.addEventListener('mouseleave', () => {
          img.style.transform = 'perspective(1200px) rotateX(0deg) rotateY(0deg)';
        });
      });
    }
  });
</script>

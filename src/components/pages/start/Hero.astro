---
import SocialButtons from "@components/SocialButtons.astro";
import Section from "@ui/Section.astro";
import { Image } from "astro:assets";
import heroImage from "@assets/images/gustadev.webp";
import { getI18n, Locale } from "@i18n/index";

const { currentLocale } = Astro;
const i18n = getI18n({ currentLocale: currentLocale as Locale });
const heroId = "hero-section";
---
<Section
  id={heroId}
  class="justify-between gap-[10%] items-center hidden md:flex"
>
  <div class="flex flex-col gap-10">
    <div class="flex flex-col gap-5">
      <h1 class="text-primary-foreground text-6xl font-primary font-medium">
        Gustavo Sequeiros
      </h1>
      <h3 class="text-muted text-4xl font-primary">{i18n.HERO.SUBTITLE}</h3>
    </div>
    <article
      class="bg-secondary/35 text-secondary-foreground p-3 text-xl text-pretty shadow-container rounded-2xl max-w-xl"
      set:html={i18n.HERO.DESCRIPTION}
    />
  </div>
  <div class="flex flex-col gap-6">
    <Image
      src={heroImage}
      alt="Gustavo Sequeiros"
      class="rounded-full aspect-square max-w-72 shadow-container transform-3d transition-transform duration-100 ease-out"
      id="hero-image"
    />
    <SocialButtons />
  </div>
</Section>

<script>
  document.addEventListener("astro:page-load", () => {
    const heroId = "hero-section";
    let heroContainer = document.getElementById(heroId);

    const callback: IntersectionObserverCallback = ([entry]) => {
      const isSticky = !entry.isIntersecting;
      document.dispatchEvent(
        new CustomEvent("is-navbar-sticky", { detail: isSticky }),
      );
    };

    const observer = new IntersectionObserver(callback, { threshold: 0.01 });

    heroContainer = document.getElementById(heroId);

    if (heroContainer) observer.observe(heroContainer);

    // Interactive tilt effect
    const heroImage = document.getElementById('hero-image');

    if (heroImage) {
      heroImage.addEventListener('mousemove', (e) => {
        const rect = heroImage.getBoundingClientRect();
        const centerX = rect.left + rect.width / 2;
        const centerY = rect.top + rect.height / 2;

        // Calcular la posiciÃ³n del mouse relativa al centro
        const mouseX = e.clientX - centerX;
        const mouseY = e.clientY - centerY;

        // Convertir a porcentajes y limitar el rango
        const rotateX = (mouseY / rect.height) * -30;
        const rotateY = (mouseX / rect.width) * 30;

        heroImage.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale3d(1.05, 1.05, 1.05)`;
      });

      heroImage.addEventListener('mouseleave', () => {
        heroImage.style.transform = 'perspective(1000px) rotateX(0deg) rotateY(0deg) scale3d(1, 1, 1)';
      });
    }
  });
</script>

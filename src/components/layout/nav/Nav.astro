---
import NavItem from './NavItem.astro';
import CodeIcon from '@/assets/icons/code.svg';
import StackIcon from '@/assets/icons/stack.svg';
import PersonIcon from '@/assets/icons/person.svg';
import pagesConfig from '@/config/pages';
import { RootSections } from '@/config/pages';
import { DEFAULT_LOCALE, getI18n, Locale } from '@/i18n/index';
import { useTranslatedPath } from '@/i18n/utils';

const { currentLocale = DEFAULT_LOCALE } = Astro;
const locale = currentLocale as Locale;
const i18n = getI18n({ currentLocale: locale });

const translatedIdSections = Object.values(pagesConfig.pages[locale].sections);

const translatePath = useTranslatedPath(locale);

const navItems = translatedIdSections.map(({ id }) => {
  let iconSection: { component: typeof CodeIcon; class: string };
  let name;
  switch (id) {
    case RootSections[locale].ABOUT_ME:
      iconSection = {
        component: PersonIcon,
        class: 'size-5 group-hover:stroke-accent',
      };
      name = i18n.NAVBAR.ABOUT;
      break;
    case RootSections[locale].STACK_TECH:
      iconSection = {
        component: StackIcon,
        class: 'size-5 group-hover:stroke-accent',
      };
      name = i18n.NAVBAR.STACK_TECH;
      break;
    default:
      iconSection = {
        component: CodeIcon,
        class: 'size-5 group-hover:stroke-accent',
      };
      name = i18n.NAVBAR.PROJECTS;
  }
  return { name, id, icon: iconSection };
});
---

<nav
  class="flex flex-col items-center md:flex-row gap-x-3 gap-y-4 px-2 py-4 md:py-2 bg-navbar/80 text-navbar-foreground ring-[1px] ring-navbar-foreground rounded-xl shadow-nav backdrop-blur-md"
>
  {
    navItems?.map(({ name, id, icon: Icon }) => (
      <NavItem as="a" href={translatePath(`#${id}`)} aria-label={id}>
        <Icon.component class={Icon.class} />
        <span class="hidden md:inline">{name}</span>
      </NavItem>
    ))
  }
</nav>

<script>
  document.addEventListener('astro:page-load', () => {
    const sections = document.querySelectorAll('section');
    const navItems = document.querySelectorAll('nav a');
    const intersectClass = [
      'text-accent',
      'bg-radial',
      'from-accent/15',
      'to-transparent',
      'to-70%',
    ];

    const callback: IntersectionObserverCallback = (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            const icon = item.querySelector('svg');
            if (item.getAttribute('aria-label') == entry.target.id) {
              item.classList.add(...intersectClass);
              icon?.classList.add('stroke-accent');
            } else {
              item.classList.remove(...intersectClass);
              icon?.classList.remove('stroke-accent');
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: '0px 0px -200px 0px',
      threshold: 0,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    document.onvisibilitychange = () => {
      if (document.visibilityState === 'hidden') {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>

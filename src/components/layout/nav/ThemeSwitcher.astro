---
import DesktopIcon from '@/assets/icons/desktop.svg';
import MoonIcon from '@/assets/icons/moon.svg';
import SunIcon from '@/assets/icons/sun.svg';
import { themeUIConfig, themes } from '@/config/theme';
import NavItem from './NavItem.astro';
import { getI18n, Locale } from '@/i18n/index';
import NavMenuContainer from './NavMenuContainer.astro';
import NavMenuItem from './NavMenuItem.astro';

const { currentLocale } = Astro;
const i18n = getI18n({ currentLocale: currentLocale as Locale });
---

<NavItem id={themeUIConfig.label} as="button" class="overflow-visible relative">
  <div class="size-5 overflow-hidden">
    <DesktopIcon id={themes.system.value} class="size-5 theme-icon" />
    <MoonIcon id={themes.dark.value} class="size-5 theme-icon" />
    <SunIcon id={themes.light.value} class="size-5 theme-icon" />
  </div>
  <NavMenuContainer id={`${themeUIConfig.label}-menu`}>
    {
      themeUIConfig.options.map(({ icon: Icon, value }) => (
        <NavMenuItem class="theme-option" data-value={value}>
          <Icon class="size-5" />
          {value === themes.system.value && i18n.NAVBAR.THEME.SYSTEM}
          {value === themes.dark.value && i18n.NAVBAR.THEME.DARK}
          {value === themes.light.value && i18n.NAVBAR.THEME.LIGHT}
        </NavMenuItem>
      ))
    }
  </NavMenuContainer>
</NavItem>

<script is:inline data-astro-rerun>
  const themeMenuId = 'change-theme-menu';
  const themeButtonId = 'change-theme';

  const themeMenu = document.getElementById(themeMenuId);
  const themeButton = document.getElementById(themeButtonId);
  const matchDark = window.matchMedia('(prefers-color-scheme: dark)');
  let remove = null;

  // ícono de acuerdo al tema
  const updateIcon = (themePreference) => {
    document.querySelectorAll('.theme-icon').forEach((element) => {
      element.style.display = element.id === themePreference ? 'flex' : 'none';
    });
  };

  // obtener tema del almacenamiento o del sistema
  const getThemePreference = () => {
    if (typeof localStorage !== 'undefined') {
      return localStorage.getItem('theme') || 'system';
    }

    return window.matchMedia('(prefers-color-scheme: dark)').matches
      ? 'dark'
      : 'light';
  };

  // Actualizar icono y escuchar cambios de tema desde el sistema operativo o navegador
  const updateTheme = () => {
    if (remove != null) {
      remove();
    }
    matchDark.addEventListener('change', updateTheme);
    remove = () => matchDark.removeEventListener('change', updateTheme);

    const themePreference = getThemePreference();
    const isDark =
      themePreference === 'dark' ||
      (themePreference === 'system' && matchDark.matches);
    updateIcon(themePreference);
    document.documentElement.classList[isDark ? 'add' : 'remove']('dark');
  };

  document.addEventListener('astro:after-swap', () => {
    updateTheme();
  });
  updateTheme();
  themeMenu = document.getElementById(themeMenuId);
  themeButton = document.getElementById(themeButtonId);
  matchDark = window.matchMedia('(prefers-color-scheme: dark)');

  // abrir y cerrar menú
  themeButton?.addEventListener('click', (e) => {
    e.stopPropagation();
    const isClosed = themeMenu?.classList.contains('hidden');
    if (isClosed) {
      themeMenu?.classList.remove('hidden');
      themeMenu?.classList.add('flex-col', 'md:flex');
    } else {
      themeMenu?.classList.remove('flex-col', 'md:flex');
      themeMenu?.classList.add('hidden');
    }
  });

  // click fuera del menú
  document.addEventListener('click', () => {
    themeMenu?.classList.add('hidden');
    themeMenu?.classList.remove('flex-col', 'md:flex');
  });

  // navbar pegajoso
  document.addEventListener('is-navbar-sticky', (event) => {
    if (event.detail) {
      themeMenu?.classList.remove('md:bottom-12');
      themeMenu?.classList.add('md:top-12');
    } else {
      themeMenu?.classList.add('md:bottom-12');
      themeMenu?.classList.remove('md:top-12');
    }
  });

  document.addEventListener('change-navbar-side', (event) => {
    if (event.detail === 'left') {
      themeMenu?.classList.remove('right-10');
      themeMenu?.classList.add('left-10');
    } else {
      themeMenu?.classList.add('right-10');
      themeMenu?.classList.remove('left-10');
    }
  });

  // Actualizar tema con cada opción
  document.querySelectorAll('.theme-option').forEach((element) => {
    element.addEventListener('click', (e) => {
      e.stopPropagation();
      localStorage.setItem('theme', e.target.dataset.value || '');
      updateTheme();
      themeMenu?.classList.add('hidden');
      themeMenu?.classList.remove('flex-col', 'md:flex');
    });
  });
</script>
